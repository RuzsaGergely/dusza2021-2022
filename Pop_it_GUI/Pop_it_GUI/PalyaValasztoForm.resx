<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AA//AAAf/4AAP/+AAH//wAB//+AB///wA/8=
</value>
  </data>
</root>